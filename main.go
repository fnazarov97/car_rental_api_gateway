package main

import (
	"car_rental/clients"
	"car_rental/config"
	docs "car_rental/docs" // docs is generated by Swag CLI, you have to import it.
	"car_rental/handlers"
	"log"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @license.name               Apache 2.0
// @license.url                http://www.apache.org/licenses/LICENSE-2.0.html
// @securityDefinitions.apikey ApiKeyAuth
// @in                         header
// @name                       Authorization
func main() {
	conf := config.Load()

	// programmatically set swagger info
	docs.SwaggerInfo.Title = conf.App
	docs.SwaggerInfo.Version = conf.AppVersion
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	router := gin.New()

	if conf.Environment != "development" {
		gin.SetMode(gin.ReleaseMode)
	}

	if conf.Environment != "production" {
		router.Use(gin.Logger(), gin.Recovery()) // Later they will be replaced by custom Logger and Recovery
	}

	grpcClients, err := clients.NewGrpcClients(conf)

	if err != nil {
		panic(err)
	}

	defer grpcClients.Close()

	h := handlers.NewHandler(conf, grpcClients)

	v1 := router.Group("/v1")
	{
		v1.Use(MyCORSMiddleware())
		v1.POST("/login", h.Login)

		v1.POST("/car", h.AuthMiddleware("*"), h.CreateCar)
		v1.GET("/car/:id", h.AuthMiddleware("*"), h.GetCarByID)
		v1.GET("/car", h.AuthMiddleware("*"), h.GetCarList)
		v1.PUT("/car", h.AuthMiddleware("*"), h.UpdateCar)
		v1.DELETE("/car/:id", h.AuthMiddleware("*"), h.DeleteCar)

		v1.POST("/brand", h.AuthMiddleware("*"), h.CreateBrand)
		v1.GET("/brand/:id", h.AuthMiddleware("*"), h.GetBrandByID)
		v1.GET("/brand", h.AuthMiddleware("ADMIN"), h.GetBrandList)
		v1.PUT("/brand", h.AuthMiddleware("*"), h.UpdateBrand)
		v1.DELETE("/brand/:id", h.AuthMiddleware("*"), h.DeleteBrand)

		v1.POST("/rental", h.AuthMiddleware("*"), h.CreateRental)
		v1.GET("/rental/:id", h.AuthMiddleware("*"), h.GetRentalByID)
		v1.GET("/rental", h.AuthMiddleware("*"), h.GetRentalList)
		v1.GET("/rentals", h.AuthMiddleware("*"), h.GetRentalsByUserId)
		v1.PUT("/rental", h.AuthMiddleware("*"), h.UpdateRental)
		v1.DELETE("/rental/:id", h.AuthMiddleware("*"), h.DeleteRental)

		v1.POST("/user", h.AuthMiddleware("*"), h.CreateUser)
		v1.GET("/user/:id", h.AuthMiddleware("*"), h.GetUserByID)
		v1.GET("/user", h.AuthMiddleware("*"), h.GetUserList)
		v1.GET("/users", h.AuthMiddleware("*"), h.GetBrandByID)
		v1.PUT("/user", h.AuthMiddleware("*"), h.UpdateUser)
		v1.DELETE("/user/:id", h.AuthMiddleware("*"), h.DeleteUser)
	}

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.Run(conf.HTTPPort) // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}

//MyCORSMiddleware ...
func MyCORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		log.Println("MyCORSMiddleware...")

		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Credentials", "true")
		c.Header("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, PATCH, DELETE")
		c.Header("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
		c.Header("Access-Control-Max-Age", "3600")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}
